function obfuscate(source,VarName,WaterMark)
    warn("เริ่ม OBF")
    local Variable = VarName or "Kalon_"
    local WM

    if source == nil then
        source = [[print("Hello World!")]]
    end

    local ticks = tick()

    if typeof(WaterMark) == "string" and WaterMark ~= nil then
        WM = "    "..tostring(WaterMark).." | kalon.exe obf free lua ez"
    else
        WM = "    ".."WaterMark".." | kalon.exe obf free lua ez"
    end

    WM = "--[[".."\n".. tostring(WM) .."\n".."]]--".."\n\n"

    local random_ = function(length)
        local letters = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"}
        local code

        if math.random(1,2) == 1 then
            code = ""..letters[math.random(1,26)]
        else
            code = ""..tostring(letters[math.random(1,26)]):upper()
        end

        for i = 1, tonumber(length) do
            if math.random(1,2) == 1 then
                local get_letters = letters[math.random(1,26)]
                if math.random(1,2) == 1 then
                    code = code..tostring(get_letters):upper()
                else
                    code = code..tostring(get_letters)
                end
            else
                code = code..tostring(math.random(0,9))
            end
        end
        return tostring(code)
    end

    local StringToBinary = function(String)
        local BinaryString = {}

        for i, Character in ipairs(String:split'') do
            local Binary = ""
            local Byte = Character:byte()
            while Byte > 0 do
                Binary = tostring(Byte % 2) .. Binary
                Byte = math.modf(Byte / 2)
            end
            table.insert(BinaryString, string.format("%.8d", Binary))
        end

        return table.concat(BinaryString, " ")
    end

    local add_binary = function(number, s)
        local highest = 1

        local topic = {
            "Deobfuscate?",
            "Yougay",
            "Horror game",
            "I'm Hacker",
            "Hi gay",
            random_(math.random(50,150)),
        }

        for i,v in pairs(topic) do
            if i > highest then
                highest = i
            end
        end

        for i = 1, tonumber(number) do
            local str = [[local ]]..Variable..tostring(random_(math.random(10,12)))..[[ = ]]..'"'..StringToBinary(tostring(topic[math.random(1, tonumber(highest))]))..'"'.."; "
            s = s..str
        end

            return tostring(s)
        end

    local Random_Variable = {
        TableByte = random_(math.random(15,20)),
        Table_concat = random_(math.random(15,20)),
        Loadstring = random_(math.random(15,20)),
    }

    local troll_func = [[function() ]]..add_binary(math.random(30,50), "")..[[ end]]
    local troll_var = [[local ]]..Variable..tostring(random_(math.random(15,20)))..[[ = ]]..troll_func

    local SourceByte = ""
    for i = 1,string.len(source) do SourceByte = SourceByte..'"\\'..string.byte(source, i)..'", ' end
    local TableByte = [[local ]]..Variable..tostring(Random_Variable.TableByte)..[[ = {]]..SourceByte..[[}]]
    local Loadstring = [[local ]]..Variable..tostring(Random_Variable.Loadstring)..[[ = loadstring(table.concat({"\32", "\102", "\117", "\110", "\99", "\116", "\105", "\111", "\110", "\40", "\103", "\97", "\121", "\41", "\10", "\32", "\9", "\105", "\102", "\32", "\103", "\97", "\121", "\32", "\61", "\61", "\32", "\49", "\48", "\48", "\32", "\116", "\104", "\101", "\110", "\10", "\32", "\9", "\9", "\112", "\114", "\105", "\110", "\116", "\40", "\34", "\71", "\65", "\89", "\32", "\73", "\83", "\32", "\71", "\79", "\68", "\34", "\41", "\10", "\32", "\9", "\101", "\110", "\100", "\10", "\32", "\101", "\110", "\100", "\10", "\32",}))()]]
    local func = {
        [1] = Variable..tostring(Random_Variable.Loadstring),
        [2] = Variable..tostring(Random_Variable.TableByte),
    }

    local fake_code = function(number,r)
        local t = {}
            for i = 1, tonumber(number) do
                local create_Var = Variable..tostring(random_(math.random(15,20)))
                local random

                if r ~= nil then
                    random = "return "..tostring(random_(tonumber(r)))
                else
                    random = "return "..tostring(random_(math.clamp(1000, string.len(source) / 2, string.len(source))))
                end

                local byte = ""
                for x = 1,string.len(random) do byte = byte..'"\\'..string.byte(random, x)..'", ' end
                local fake = [[local ]]..create_Var..[[ = {]]..byte..[[}; ]]..[[local ]]..create_Var.." = "..func[1]..[[(]]..create_Var..[[); ]]
                table.insert(t,fake)
            end

            return unpack(t)
        end

    local obfuscated = WM..troll_var.."; "..Loadstring.."; "..fake_code(math.random(2,4), math.random(400,600))..TableByte.."; "..[[local ]]..Variable..tostring(random_(math.random(15,20))).." = "..func[1].."("..func[2]..")".."; "..fake_code(math.random(2,4), math.random(string.len(source) / 2, string.len(source) * 2))
    setclipboard(obfuscated)
    warn("OBF สำเร็จ ในเวลา "..tostring(tick() - ticks).." วินาที")
return
end

return function(source,CustomVarName,WaterMark)
task.spawn(function()
    obfuscate(source,CustomVarName,WaterMark)
end)
end


